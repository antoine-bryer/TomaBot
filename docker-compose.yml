# docker-compose.yml
# Configuration de base partag√©e entre dev et prod

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: tomabot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-tomabot}
      POSTGRES_USER: ${DB_USER:-tomabot}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tomabot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tomabot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tomabot-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - tomabot-network
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Adminer (Database UI)
  adminer:
    image: adminer:latest
    container_name: tomabot-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - tomabot-network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tomabot-network:
    driver: bridge