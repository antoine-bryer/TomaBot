version: '3.9'

services:
  postgres:
    image: postgres:17-alpine
    container_name: tomabot-postgres
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tomabot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tomabot"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tomabot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tomabot-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: tomabot-adminer
    ports:
      - "8181:8181"
    networks:
      - tomabot-network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  tomabot-app:
    build: ./tomabot
    image: antoinebryer/tomabot:latest
    container_name: tomabot-app
    restart: always
    depends_on:
      - postgres
      - redis
    env_file: .env
    command: [ "java", "-jar", "/app/app.jar" ]
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      DISCORD_TOKEN: ${DISCORD_BOT_TOKEN}
    ports:
      - "8080:8080"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tomabot-network:
    driver: bridge